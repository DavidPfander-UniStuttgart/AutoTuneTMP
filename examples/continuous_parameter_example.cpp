#include <algorithm>
#include <iostream>
#include <vector>

#include "autotune/autotune.hpp"
#include "autotune/parameter.hpp"
#include "autotune/tuners/line_search.hpp"

// defines kernel, put in single compilation unit
AUTOTUNE_DECLARE_DEFINE_KERNEL(int(int), add_one)

int main(void) {
  autotune::add_one.set_verbose(true);
  autotune::add_one.set_source_dir("examples/kernel_minimal");

  // register parameters
  autotune::add_one.add_parameter("ADD_ONE", {"0", "1"});

  // derive type submitted initial value
  // double-style parameter
  // differentiate between set type and continuous parameter by second argument
  // (if std::vector<T> -> has to be set argument)
  // two optional parameters: lower and upper bound
  autotune::add_one.add_parameter("CONT_PAR_DOUBLE", 0.3, 0.0, 1.0);
  
  // derive type submitted initial value
  // integer style parameter
  // differentiate between set type and continuous parameter by second argument
  // (if std::vector<T> -> has to be set argument)
  // three optional parameters: lower bound, upper bound, allowed step
  autotune::add_one.add_parameter("CONT_PAR_INT", 3, -5, 10, 1);

  std::function<bool(int)> test_result = [](int r) -> bool {
    /* tests values generated by kernel */
    return true;
  };

  int a = 5;

  size_t line_search_iterations = 5;
  std::vector<size_t> line_search_initial_guess = {0};
  autotune::tuners::line_search<decltype(autotune::add_one)> tuner(
      autotune::add_one, line_search_iterations, 1,
      line_search_initial_guess);
  tuner.setup_test(test_result);
  std::vector<size_t> optimal_parameter_indices = tuner.tune(a);

  // // std::cout << "-------- final compilation ---------" << std::endl;
  // // std::vector<size_t> optimal_parameter_indices = {0};
  // autotune::add_one.create_parameter_file(optimal_parameter_indices);
  // autotune::add_one.compile();
  // // std::cout << "-------- final kernel call ---------" << std::endl;
  // autotune::add_one(a);
  return 0;
}
