#include <algorithm>
#include <iostream>
#include <vector>

#include "autotune/autotune.hpp"
#include "autotune/continuous_parameter.hpp"
#include "autotune/tuners/line_search.hpp"

// defines kernel, put in single compilation unit
AUTOTUNE_DECLARE_DEFINE_KERNEL(int(int), add_one)

int main(void) {
  autotune::add_one.set_verbose(true);
  autotune::add_one.set_source_dir("examples/kernel_minimal");

  // register parameters
  autotune::countable_set parameters;
  autotune::fixed_set_parameter p1("ADD_ONE", {"0", "1"});
  parameters.add_parameter(p1);

  std::function<bool(int)> test_result = [](int) -> bool {
    /* tests values generated by kernel */
    return true;
  };

  int a = 5;

  size_t line_search_iterations = 1;
  autotune::tuners::line_search tuner(autotune::add_one, parameters,
                                      line_search_iterations, 1);
  tuner.setup_test(test_result);
  autotune::countable_set optimal_parameters = tuner.tune(a);
  autotune::add_one.set_parameter_values(optimal_parameters);

  std::cout << "-------- final compilation ---------" << std::endl;
  autotune::add_one.create_parameter_file();
  autotune::add_one.compile();
  std::cout << "-------- final kernel call ---------" << std::endl;
  autotune::add_one(a);
  return 0;
}
