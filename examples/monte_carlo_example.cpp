#include <algorithm>
#include <iostream>
#include <vector>

#include "autotune/parameter.hpp"
#include "autotune/tuners/limited_set.hpp"
#include "autotune/tuners/monte_carlo.hpp"

// defines kernel, put in single compilation unit
AUTOTUNE_DECLARE_DEFINE_KERNEL(int(int), add_one)

int main(void) {
  autotune::add_one.set_source_dir("examples/kernel_minimal");

  autotune::limited_set parameters;
  autotune::limited_continuous_parameter p1("PAR_1", 1.0, 1.0, 5.0, true);
  parameters.add_parameter(p1);

  autotune::limited_continuous_parameter p2("PAR_2", 1.0, 1.0, 5.0, true);
  parameters.add_parameter(p2);

  std::function<bool(int)> test_result = [](int) -> bool {
    /* tests values generated by kernel */
    return true;
  };

  int a = 5;

  autotune::tuners::monte_carlo<decltype(autotune::add_one)> tuner(
      autotune::add_one, parameters, 10);
  tuner.setup_test(test_result);
  tuner.set_verbose(true);
  autotune::limited_set optimal_parameters = tuner.tune(a);
  autotune::add_one.set_parameter_values(optimal_parameters);
  optimal_parameters.print_values();

  return 0;
}
